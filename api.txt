//Get Products
app.get('/products/:userId',async (req, res) => {

  var userId=req.params.userId 


  try{

    var productPath = '/Products/';
    var products = db.ref(productPath);
    
    products.on('value',async (snapshot) => {

      let prods=snapshot.val()

      
      var cartPath = '/Cart/';
      var cartdb = db.ref(cartPath);


      cartdb.child(userId).once('value',async function(snapshot) {

        let cart=snapshot.val()

        await prods.coffees.forEach(coff => {
          let qty=0
          if (cart && cart.coffees){
              Object.keys(cart.coffees).map((key) => cart.coffees[key].coffeeId === coff.coffeeId ? (qty=qty+cart.coffees[key].qty) : 0)
          }
          coff.qty=qty
          coff.sweet=1
          coff.type=0
        });
  
        await prods.bakeries.forEach(baker => {
          let qty=0
          if (cart && cart.bakeries){
              Object.keys(cart.bakeries).map((key) => cart.bakeries[key].bakeryId === baker.bakeryId ? (qty=qty+cart.bakeries[key].qty) : 0)
          }
          baker.qty=qty
        });

        return res.status(200).send({ error: false, message: 'product data',data: prods})

      });  

      
    }, (errorObject) => {
      console.log('The read failed: ' + errorObject.name);
    }); 

    

  }catch(err){
    //console.log(err)
    return err
  }


});

//Add to Cart
app.post('/cart',async (req, res) => {


  var userId=req.body.lineId
  var itemAdd=req.body.data

  var type = (itemAdd.coffeeId===undefined) ? 'bakeries' : 'coffees'

  try{

    var cartPath = '/Cart/' + userId + '/' + type +'/';
    var cartdb = db.ref(cartPath);

    cartdb.once('value', function(snapshot) {

      let cart=snapshot.val()
      let index=undefined

      if (cart){//Check if not empty cart

        if (type==='coffees'){
            Object.keys(cart).map((key) => cart[key].coffeeId ===  itemAdd.coffeeId && cart[key].sweet === itemAdd.sweet && cart[key].type === itemAdd.type ? index=key : 0)
        }else{
            Object.keys(cart).map((key) => cart[key].bakeryId ===  itemAdd.bakeryId  ? index=key : 0)
        }
      
      }

      //Update cart (item exist)
      if (index !== undefined) {

        let cartPath = '/Cart/' + userId + '/' + type +'/' + index + '/';
        let cartdb = db.ref(cartPath);
        
        cartdb.update(
          {
            qty: cart[index].qty+1,
          }, 
              function(error) {
                  if (error) {
                      res.send("Data could not be saved." + error);
                  } 
                  else {

                    return res.status(201).send({ error: false, message: 'item updated!'});

                  }
          }); 
        
      } else{ //Add new item to cart

        let cartPath = '/Cart/' + userId + '/' + type +'/';
        let cartdb = db.ref(cartPath);
        itemAdd.qty=1
        cartdb.push(itemAdd, function(error) {
                if (error) {
                    res.send("Data could not be saved." + error);
                } 
                else {

                  return res.status(201).send({ error: false, message: 'item added!'});

                }
        }); 
    
      }
    
    }); 

  }catch(err){

    return res.status(404).send({ error: false, message: 'fail to add item!'});

  }


});



//Delete 
app.delete('/cart',async (req, res) => {

  var userId=req.body.lineId

  var itemDel=req.body.data

  var type = (itemDel.coffeeId===undefined) ? 'bakeries' : 'coffees'

  try{

    var cartPath = '/Cart/' + userId + '/' + type +'/';
    var cartdb = db.ref(cartPath);
  
    cartdb.once('value',async function(snapshot) {
  
      let cart=snapshot.val()
      let index= undefined
  
      if (type==='coffees'){
        index= Object.keys(cart).map(key=> (!(cart[key]===undefined) && cart[key].coffeeId === itemDel.coffeeId) ? key : undefined)
      }else{
        index= Object.keys(cart).map(key=> (!(cart[key]===undefined) && cart[key].bakeryId === itemDel.bakeryId) ? key : undefined)
      }
  
      index.forEach(async (indx)=>{
        if (indx!== undefined){
          let cartPath = '/Cart/' + userId + '/' + type +'/' + indx + '/';
          let cartdb = db.ref(cartPath);
          await cartdb.remove()
        }
      });
  
      return res.status(200).send({ error: false, message: 'item deleted!'});
  
    }); 

  }catch(err){

    return res.status(404).send({ error: false, message: 'fail to delete item!'});

  }



});


